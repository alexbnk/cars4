var passport = require('passport');
var FacebookStrategy = require('passport-facebook').Strategy;
var User = require('../models/userModel');
var jwt = require('jsonwebtoken');
var config = require('../config/config'); // the secrets file

passport.use(new FacebookStrategy({
        clientID: '807300156089918',
        clientSecret: 'f6d0c03bed9964230ad800a88b9b2451',
        callbackURL: 'http://localhost:7000/auth/facebook/callback',
        // profileFields: ['email', 'displayName']
        profileFields: [ 'email','displayName', 'first_name','last_name', 'location', 'friends']
    },
    function(accessToken, refreshToken, profile, done) {

      // var newLoc={};
      //
      // userLocation.findOne({'id': profile._json.location.id}, function(err, loc) {
      //     if(!loc) {
      //
      //       loc = new userLocation({
      //         id:profile._json.location.id,
      //         provider: profile.provider,
      //         data: profile._json.location.name,
      //         created : new Date()
      //
      //       })
      //     }
      //     loc.save(function(err, newLocation) {
      //       if (err) {
      //         return done(err);
      //       } else {
      //
      //         newLoc= newLocation;
      //         console.log(newLocation);
      //       }
      //
      //     })
      //   })


        User.findOne({
            'id': profile.id
        }, function(err, user) {

            //If no user was found, create a new user with details from the facebook profile
            if (!user) {
                console.log('user not found in db, creating a new one');

                user = new User({
                    id: profile.id,
                    displayName: profile.displayName,
                    first_name: profile.name.givenName,
                    middle_name: profile.name.middleName,
                    last_name: profile.name.familyName,
                    location: profile._json.location.name,
                    email: profile.emails ? profile.emails[0].value : "",
                    provider: profile.provider,
                    loginCount: 0,
                    photos: 'http://graph.facebook.com/' + profile.id + '/picture'

                });
            } else {
                //else, a user exists so let's add one to their login count
                user.loginCount++;
                user.lastLogin = new Date();

            };





















            //finally let's save and call "done"
            user.save(function(err, newUser) {
                if (err) {
                    //  console.log(err);
                    return done(err);
                } else {
                      var token = jwt.sign(
                      {
                        id: newUser.id,
                        displayName: newUser.displayName,
                      }
                        ,config.localKey,
                      {
                        expiresIn: "1000d"
                      });

                    return done(null, {
                        token: token,
                        name: newUser.displayName,
                        id: newUser._id,
                        oid: newUser.id,
                        photo: newUser.photos[0]
                    });
                }
            });
        });







        //code to check database goes here

        //code to create JWT goes here


    }
));

//passport configuration here

module.exports = passport;


//userModel schema
// provider: {type: String}, //The provider with which the user authenticated (facebook, twitter, etc.).
// id: {type: String}, //A unique identifier for the user, as generated by the service provider.
// displayName: {type: String}, //The name of this user, suitable for display.
// name: {familyName: String ,givenName: String, middleName: String },
// emails: {type: String},
// photos: [],
// lastlogin: {type: Date },
// loginCount: {type:Number},
// roles: [],
// organizations: [],
// created: {type: Date}
